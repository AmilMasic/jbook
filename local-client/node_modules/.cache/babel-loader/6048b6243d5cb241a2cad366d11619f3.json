{"ast":null,"code":"var _jsxFileName = \"/Users/amilmasic/Development/code/react/jbook/src/components/cell-list.tsx\",\n    _s = $RefreshSig$();\n\nimport { useTypedSelector } from '../hooks/use-typed-selector';\nimport AddCell from './add-cell';\nimport CellListItem from './cell-list-item';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst CellList = () => {\n  _s();\n\n  const cells = useTypedSelector(({\n    cells: {\n      order,\n      data\n    }\n  }) => {\n    return order.map(id => {\n      return data[id];\n    });\n  });\n  const renderedCells = cells.map(cell => /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(AddCell, {\n      nextCellId: cell.id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CellListItem, {\n      cell: cell\n    }, cell.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [renderedCells, /*#__PURE__*/_jsxDEV(AddCell, {\n      nextCellId: null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CellList, \"ij3ho+NMbIxaBKnXgl+evU0tiZI=\", false, function () {\n  return [useTypedSelector];\n});\n\n_c = CellList;\nexport default CellList;\n\nvar _c;\n\n$RefreshReg$(_c, \"CellList\");","map":{"version":3,"sources":["/Users/amilmasic/Development/code/react/jbook/src/components/cell-list.tsx"],"names":["useTypedSelector","AddCell","CellListItem","CellList","cells","order","data","map","id","renderedCells","cell"],"mappings":";;;AAAA,SAAQA,gBAAR,QAA+B,6BAA/B;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,YAAP,MAAyB,kBAAzB;;;;AAEA,MAAMC,QAAkB,GAAG,MAAM;AAAA;;AAC/B,QAAMC,KAAK,GAAGJ,gBAAgB,CAAC,CAAC;AAAEI,IAAAA,KAAK,EAAE;AAACC,MAAAA,KAAD;AAAQC,MAAAA;AAAR;AAAT,GAAD,KAA8B;AAC3D,WAAOD,KAAK,CAACE,GAAN,CAAWC,EAAD,IAAQ;AACvB,aAAOF,IAAI,CAACE,EAAD,CAAX;AACD,KAFM,CAAP;AAGD,GAJ6B,CAA9B;AAMA,QAAMC,aAAa,GAAGL,KAAK,CAACG,GAAN,CAAWG,IAAD,iBAC9B;AAAA,4BACE,QAAC,OAAD;AAAS,MAAA,UAAU,EAAEA,IAAI,CAACF;AAA1B;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,YAAD;AAA4B,MAAA,IAAI,EAAEE;AAAlC,OAAmBA,IAAI,CAACF,EAAxB;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADoB,CAAtB;AAMA,sBACE;AAAA,eACGC,aADH,eAEE,QAAC,OAAD;AAAS,MAAA,UAAU,EAAE;AAArB;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CAnBD;;GAAMN,Q;UACUH,gB;;;KADVG,Q;AAqBN,eAAeA,QAAf","sourcesContent":["import {useTypedSelector} from '../hooks/use-typed-selector';\nimport AddCell from './add-cell';\nimport CellListItem from './cell-list-item';\n\nconst CellList: React.FC = () => {\n  const cells = useTypedSelector(({ cells: {order, data} }) => {\n    return order.map((id) => {\n      return data[id];\n    });\n  });\n\n  const renderedCells = cells.map((cell) => (\n    <>\n      <AddCell nextCellId={cell.id}/>\n      <CellListItem key={cell.id} cell={cell} />\n    </>\n  ));\n  return (\n    <div>\n      {renderedCells}\n      <AddCell nextCellId={null}/>\n    </div>\n  );\n};\n\nexport default CellList;\n"]},"metadata":{},"sourceType":"module"}