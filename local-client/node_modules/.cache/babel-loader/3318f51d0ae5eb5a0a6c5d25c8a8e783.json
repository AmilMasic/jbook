{"ast":null,"code":"var _jsxFileName = \"/Users/amilmasic/Development/code/react/jbook/src/components/code-cell.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport CodeEditor from './/code-editor';\nimport Preview from './/preview';\nimport bundle from '../bundler';\nimport Resizable from './resizable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CodeCell = () => {\n  _s();\n\n  const [code, setCode] = useState('');\n  const [input, setInput] = useState('');\n\n  const onClick = async () => {\n    const output = await bundle(input);\n    setCode(output);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Resizable, {\n    direction: \"vertical\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'row'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Resizable, {\n        direction: \"horizontal\",\n        children: /*#__PURE__*/_jsxDEV(CodeEditor, {\n          initialValue: \"const a = 1;\",\n          onChange: value => setInput(value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Preview, {\n        code: code\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CodeCell, \"gg1OCfBTcBn/WTN6LEnbOG9SPco=\");\n\n_c = CodeCell;\nexport default CodeCell;\n\nvar _c;\n\n$RefreshReg$(_c, \"CodeCell\");","map":{"version":3,"sources":["/Users/amilmasic/Development/code/react/jbook/src/components/code-cell.tsx"],"names":["useState","CodeEditor","Preview","bundle","Resizable","CodeCell","code","setCode","input","setInput","onClick","output","height","display","flexDirection","value"],"mappings":";;;AAAA,SAASA,QAAT,QAAwB,OAAxB;AACA,OAAOC,UAAP,MAAuB,gBAAvB;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,MAAP,MAAmB,YAAnB;AACA,OAAOC,SAAP,MAAsB,aAAtB;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AAErB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,EAAD,CAAlC;;AAEA,QAAMU,OAAO,GAAG,YAAY;AAC1B,UAAMC,MAAM,GAAG,MAAMR,MAAM,CAACK,KAAD,CAA3B;AACAD,IAAAA,OAAO,CAACI,MAAD,CAAP;AACD,GAHD;;AAKA,sBACE,QAAE,SAAF;AAAY,IAAA,SAAS,EAAC,UAAtB;AAAA,2BACE;AAAK,MAAA,KAAK,EAAE;AAAEC,QAAAA,MAAM,EAAE,MAAV;AAAkBC,QAAAA,OAAO,EAAE,MAA3B;AAAmCC,QAAAA,aAAa,EAAE;AAAlD,OAAZ;AAAA,8BACE,QAAC,SAAD;AAAW,QAAA,SAAS,EAAC,YAArB;AAAA,+BACE,QAAC,UAAD;AAAY,UAAA,YAAY,EAAC,cAAzB;AACE,UAAA,QAAQ,EAAGC,KAAD,IAAWN,QAAQ,CAACM,KAAD;AAD/B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAME,QAAC,OAAD;AAAS,QAAA,IAAI,EAAET;AAAf;AAAA;AAAA;AAAA;AAAA,cANF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CAtBD;;GAAMD,Q;;KAAAA,Q;AAwBN,eAAeA,QAAf","sourcesContent":["import { useState} from 'react';\nimport CodeEditor from './/code-editor';\nimport Preview from './/preview';\nimport bundle from '../bundler';\nimport Resizable from './resizable';\n\nconst CodeCell = () => {\n\n  const [code, setCode] = useState('');\n  const [input, setInput] = useState('');\n\n  const onClick = async () => {\n    const output = await bundle(input);\n    setCode(output);\n  };\n\n  return (\n    < Resizable direction=\"vertical\">\n      <div style={{ height: '100%', display: 'flex', flexDirection: 'row'}}>\n        <Resizable direction=\"horizontal\">\n          <CodeEditor initialValue=\"const a = 1;\"\n            onChange={(value) => setInput(value)}\n          />\n        </Resizable>\n        <Preview code={code}/>\n      </div>\n    </Resizable>\n  );\n};\n\nexport default CodeCell;\n"]},"metadata":{},"sourceType":"module"}