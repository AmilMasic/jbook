{"ast":null,"code":"var _jsxFileName = \"/Users/amilmasic/Development/code/react/jbook/local-client/src/components/add-cell.tsx\",\n    _s = $RefreshSig$();\n\nimport './add-cell.css';\nimport { useActions } from '../hooks/use-actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AddCell = ({\n  forceVisible,\n  previousCellId\n}) => {\n  _s();\n\n  const {\n    insertCellAfter\n  } = useActions();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `add-cell ${forceVisible && 'force-visible'}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"add-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button is-rounded is-primary is-small\",\n        onClick: () => insertCellAfter(previousCellId, 'code'),\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"icon is-small\",\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fas fa-plus\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 16,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Code\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button is-rounded is-primary is-small\",\n        onClick: () => insertCellAfter(previousCellId, 'text'),\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"icon is-small\",\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fas fa-plus\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"divider\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AddCell, \"ain1WfJPsCStQGbSx2B93tc4GvE=\", false, function () {\n  return [useActions];\n});\n\n_c = AddCell;\nexport default AddCell;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddCell\");","map":{"version":3,"sources":["/Users/amilmasic/Development/code/react/jbook/local-client/src/components/add-cell.tsx"],"names":["useActions","AddCell","forceVisible","previousCellId","insertCellAfter"],"mappings":";;;AAAA,OAAO,gBAAP;AACA,SAASA,UAAT,QAA2B,sBAA3B;;;AAOA,MAAMC,OAA+B,GAAG,CAAC;AAACC,EAAAA,YAAD;AAAeC,EAAAA;AAAf,CAAD,KAAqC;AAAA;;AAC3E,QAAM;AAAEC,IAAAA;AAAF,MAAsBJ,UAAU,EAAtC;AACA,sBACE;AAAK,IAAA,SAAS,EAAG,YAAWE,YAAY,IAAI,eAAgB,EAA5D;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,8BACE;AAAQ,QAAA,SAAS,EAAC,uCAAlB;AAA0D,QAAA,OAAO,EAAE,MAAME,eAAe,CAACD,cAAD,EAAiB,MAAjB,CAAxF;AAAA,gCACE;AAAM,UAAA,SAAS,EAAC,eAAhB;AAAA,iCACE;AAAG,YAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAOE;AAAQ,QAAA,SAAS,EAAC,uCAAlB;AAA0D,QAAA,OAAO,EAAE,MAAMC,eAAe,CAACD,cAAD,EAAiB,MAAjB,CAAxF;AAAA,gCACE;AAAM,UAAA,SAAS,EAAC,eAAhB;AAAA,iCACE;AAAG,YAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,cAPF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAeE;AAAK,MAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,YAfF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAqBD,CAvBD;;GAAMF,O;UACwBD,U;;;KADxBC,O;AAyBN,eAAeA,OAAf","sourcesContent":["import './add-cell.css'\nimport { useActions } from '../hooks/use-actions';\n\n\ninterface AddCellProps {\n  previousCellId: string | null\n  forceVisible?: boolean;\n}\nconst AddCell: React.FC<AddCellProps> = ({forceVisible, previousCellId }) => {\n  const { insertCellAfter } = useActions();\n  return (\n    <div className={`add-cell ${forceVisible && 'force-visible'}`}>\n      <div className=\"add-buttons\">\n        <button className=\"button is-rounded is-primary is-small\" onClick={() => insertCellAfter(previousCellId, 'code')}>\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-plus\" />\n          </span>\n          <span>Code</span>\n        </button>\n        <button className=\"button is-rounded is-primary is-small\" onClick={() => insertCellAfter(previousCellId, 'text')}>\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-plus\" />\n          </span>\n          <span>Text</span>\n        </button>\n      </div>\n      <div className=\"divider\"></div>\n\n    </div>\n  )\n\n};\n\nexport default AddCell;\n"]},"metadata":{},"sourceType":"module"}