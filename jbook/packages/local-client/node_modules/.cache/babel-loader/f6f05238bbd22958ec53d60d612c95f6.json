{"ast":null,"code":"var _jsxFileName = \"/Users/amilmasic/Development/code/react/jbook/src/components/resizable.tsx\";\nimport { ResizableBox } from 'react-resizable';\nimport './resizable.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Resizable = ({\n  direction,\n  children\n}) => {\n  let resizableProps;\n\n  if (direction === 'horizontal') {\n    resizableProps = {\n      className: 'resize-horizontal',\n      minConstraints: [window.innerWidth * 0.2, Infinity],\n      maxConstraints: [window.innerWidth * 0.75, Infinity],\n      height: Infinity,\n      width: window.innerWidth * 0.75,\n      resizeHandles: ['e']\n    };\n  } else {\n    resizableProps = {\n      minConstraints: [Infinity, 24],\n      maxConstraints: [Infinity, window.innerHeight * 0.9],\n      height: 300,\n      width: Infinity,\n      resizeHandles: ['s']\n    };\n  }\n\n  return /*#__PURE__*/_jsxDEV(ResizableBox, { ...resizableProps,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Resizable;\nexport default Resizable;\n\nvar _c;\n\n$RefreshReg$(_c, \"Resizable\");","map":{"version":3,"sources":["/Users/amilmasic/Development/code/react/jbook/src/components/resizable.tsx"],"names":["ResizableBox","Resizable","direction","children","resizableProps","className","minConstraints","window","innerWidth","Infinity","maxConstraints","height","width","resizeHandles","innerHeight"],"mappings":";AAAA,SAASA,YAAT,QAAgD,iBAAhD;AACA,OAAO,iBAAP;;;AAMA,MAAMC,SAAmC,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAD,KAA4B;AACtE,MAAIC,cAAJ;;AAEA,MAAIF,SAAS,KAAK,YAAlB,EAAgC;AAC9BE,IAAAA,cAAc,GAAG;AACfC,MAAAA,SAAS,EAAE,mBADI;AAEfC,MAAAA,cAAc,EAAE,CAACC,MAAM,CAACC,UAAP,GAAoB,GAArB,EAA0BC,QAA1B,CAFD;AAGfC,MAAAA,cAAc,EAAE,CAACH,MAAM,CAACC,UAAP,GAAoB,IAArB,EAA2BC,QAA3B,CAHD;AAIfE,MAAAA,MAAM,EAAEF,QAJO;AAKfG,MAAAA,KAAK,EAAEL,MAAM,CAACC,UAAP,GAAoB,IALZ;AAMfK,MAAAA,aAAa,EAAC,CAAC,GAAD;AANC,KAAjB;AAQD,GATD,MASO;AACLT,IAAAA,cAAc,GAAG;AACfE,MAAAA,cAAc,EAAE,CAACG,QAAD,EAAW,EAAX,CADD;AAEfC,MAAAA,cAAc,EAAC,CAACD,QAAD,EAAWF,MAAM,CAACO,WAAP,GAAqB,GAAhC,CAFA;AAGfH,MAAAA,MAAM,EAAC,GAHQ;AAIfC,MAAAA,KAAK,EAACH,QAJS;AAKfI,MAAAA,aAAa,EAAC,CAAC,GAAD;AALC,KAAjB;AAOD;;AAED,sBACE,QAAC,YAAD,OAAkBT,cAAlB;AAAA,cACGD;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CA3BD;;KAAMF,S;AA6BN,eAAeA,SAAf","sourcesContent":["import { ResizableBox, ResizableBoxProps } from 'react-resizable';\nimport './resizable.css';\n\ninterface ResizableProps {\n  direction: 'horizontal' | 'vertical';\n}\n\nconst Resizable: React.FC<ResizableProps> = ({ direction, children}) => {\n  let resizableProps: ResizableBoxProps;\n\n  if (direction === 'horizontal') {\n    resizableProps = {\n      className: 'resize-horizontal',\n      minConstraints: [window.innerWidth * 0.2, Infinity],\n      maxConstraints: [window.innerWidth * 0.75, Infinity],\n      height: Infinity,\n      width: window.innerWidth * 0.75,\n      resizeHandles:['e'],\n    };\n  } else {\n    resizableProps = {\n      minConstraints: [Infinity, 24],\n      maxConstraints:[Infinity, window.innerHeight * 0.9],\n      height:300,\n      width:Infinity,\n      resizeHandles:['s'],\n    };\n  }\n\n  return (\n    <ResizableBox{ ...resizableProps}>\n      {children}\n    </ResizableBox>\n  );\n};\n\nexport default Resizable;\n"]},"metadata":{},"sourceType":"module"}