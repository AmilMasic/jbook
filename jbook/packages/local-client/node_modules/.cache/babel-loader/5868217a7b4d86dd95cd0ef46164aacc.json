{"ast":null,"code":"import axios from 'axios';\nimport localForage from 'localforage';\nconst fileCache = localForage.createInstance({\n  name: 'filecache'\n});\nexport const unpkgPathPlugin = inputCode => {\n  return {\n    name: 'unpkg-path-plugin',\n\n    setup(build) {\n      build.onResolve({\n        filter: /(^index.js$)/\n      }, () => {\n        return {\n          path: 'index.js',\n          namespace: 'a'\n        };\n      });\n      build.onResolve({\n        filter: /^\\.+\\//\n      }, args => {\n        return {\n          namespace: 'a',\n          path: new URL(args.path, 'https://unpkg.com' + args.resolveDir + '/').href\n        };\n      });\n      build.onResolve({\n        filter: /.*/\n      }, async args => {\n        console.log('onResolve', args);\n\n        if (args.path.includes('./') || args.path.includes('../')) {}\n\n        return {\n          namespace: 'a',\n          path: `https://unpkg.com/${args.path}`\n        };\n      });\n      build.onLoad({\n        filter: /.*/\n      }, async args => {\n        console.log('onLoad', args);\n\n        if (args.path === 'index.js') {\n          return {\n            loader: 'jsx',\n            contents: inputCode\n          };\n        }\n\n        const cachedResult = await fileCache.getItem(args.path);\n\n        if (cachedResult) {\n          return cachedResult;\n        }\n\n        const {\n          data,\n          request\n        } = await axios.get(args.path);\n        const result = {\n          loader: 'jsx',\n          contents: data,\n          resolveDir: new URL('./', request.responseURL).pathname\n        };\n        await fileCache.setItem(args.path, result);\n        return result;\n      });\n    }\n\n  };\n};","map":{"version":3,"sources":["/Users/amilmasic/Development/code/react/jbook/src/plugins/unpkg-path-plugin.ts"],"names":["axios","localForage","fileCache","createInstance","name","unpkgPathPlugin","inputCode","setup","build","onResolve","filter","path","namespace","args","URL","resolveDir","href","console","log","includes","onLoad","loader","contents","cachedResult","getItem","data","request","get","result","responseURL","pathname","setItem"],"mappings":"AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,aAAxB;AAEA,MAAMC,SAAS,GAAGD,WAAW,CAACE,cAAZ,CAA2B;AAC3CC,EAAAA,IAAI,EAAE;AADqC,CAA3B,CAAlB;AAIA,OAAO,MAAMC,eAAe,GAAIC,SAAD,IAAuB;AACpD,SAAO;AACLF,IAAAA,IAAI,EAAE,mBADD;;AAELG,IAAAA,KAAK,CAACC,KAAD,EAA6B;AAChCA,MAAAA,KAAK,CAACC,SAAN,CAAgB;AAACC,QAAAA,MAAM,EAAE;AAAT,OAAhB,EAA0C,MAAM;AAC9C,eAAO;AAACC,UAAAA,IAAI,EAAE,UAAP;AAAmBC,UAAAA,SAAS,EAAE;AAA9B,SAAP;AACD,OAFD;AAIAJ,MAAAA,KAAK,CAACC,SAAN,CAAgB;AAACC,QAAAA,MAAM,EAAE;AAAT,OAAhB,EAAqCG,IAAD,IAAe;AACjD,eAAO;AACLD,UAAAA,SAAS,EAAE,GADN;AAELD,UAAAA,IAAI,EAAE,IAAIG,GAAJ,CACJD,IAAI,CAACF,IADD,EAEJ,sBAAsBE,IAAI,CAACE,UAA3B,GAAwC,GAFpC,EAGJC;AALG,SAAP;AAOD,OARD;AASAR,MAAAA,KAAK,CAACC,SAAN,CAAgB;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAhB,EAAkC,MAAOG,IAAP,IAAqB;AACrDI,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBL,IAAzB;;AAEA,YAAIA,IAAI,CAACF,IAAL,CAAUQ,QAAV,CAAmB,IAAnB,KAA4BN,IAAI,CAACF,IAAL,CAAUQ,QAAV,CAAmB,KAAnB,CAAhC,EAA0D,CAEzD;;AACD,eAAO;AACLP,UAAAA,SAAS,EAAE,GADN;AAELD,UAAAA,IAAI,EAAG,qBAAoBE,IAAI,CAACF,IAAK;AAFhC,SAAP;AAID,OAVD;AAYAH,MAAAA,KAAK,CAACY,MAAN,CAAa;AAAEV,QAAAA,MAAM,EAAE;AAAV,OAAb,EAA+B,MAAOG,IAAP,IAAqB;AAClDI,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBL,IAAtB;;AAEA,YAAIA,IAAI,CAACF,IAAL,KAAc,UAAlB,EAA8B;AAC5B,iBAAO;AACLU,YAAAA,MAAM,EAAE,KADH;AAELC,YAAAA,QAAQ,EAAEhB;AAFL,WAAP;AAID;;AAGD,cAAMiB,YAAY,GAAG,MAAMrB,SAAS,CAACsB,OAAV,CAAwCX,IAAI,CAACF,IAA7C,CAA3B;;AAEA,YAAIY,YAAJ,EAAiB;AACf,iBAAOA,YAAP;AACD;;AAID,cAAM;AAAEE,UAAAA,IAAF;AAAQC,UAAAA;AAAR,YAAoB,MAAM1B,KAAK,CAAC2B,GAAN,CAAUd,IAAI,CAACF,IAAf,CAAhC;AAEA,cAAMiB,MAA4B,GAAG;AACnCP,UAAAA,MAAM,EAAE,KAD2B;AAEnCC,UAAAA,QAAQ,EAAEG,IAFyB;AAGnCV,UAAAA,UAAU,EAAE,IAAID,GAAJ,CAAQ,IAAR,EAAcY,OAAO,CAACG,WAAtB,EAAmCC;AAHZ,SAArC;AAKA,cAAM5B,SAAS,CAAC6B,OAAV,CAAkBlB,IAAI,CAACF,IAAvB,EAA6BiB,MAA7B,CAAN;AACA,eAAOA,MAAP;AACD,OA5BD;AA6BD;;AAzDI,GAAP;AA2DD,CA5DM","sourcesContent":["import * as esbuild from 'esbuild-wasm';\nimport axios from 'axios';\nimport localForage from 'localforage';\n\nconst fileCache = localForage.createInstance({\n  name: 'filecache',\n});\n\nexport const unpkgPathPlugin = (inputCode: string) => {\n  return {\n    name: 'unpkg-path-plugin',\n    setup(build: esbuild.PluginBuild) {\n      build.onResolve({filter: /(^index.js$)/}, () => {\n        return {path: 'index.js', namespace: 'a'};\n      });\n\n      build.onResolve({filter: /^\\.+\\//}, (args: any) => {\n        return {\n          namespace: 'a',\n          path: new URL(\n            args.path,\n            'https://unpkg.com' + args.resolveDir + '/'\n          ).href,\n        };\n      })\n      build.onResolve({ filter: /.*/ }, async (args: any) => {\n        console.log('onResolve', args);\n\n        if (args.path.includes('./') || args.path.includes('../')){\n\n        }\n        return {\n          namespace: 'a',\n          path: `https://unpkg.com/${args.path}`,\n        };\n      });\n\n      build.onLoad({ filter: /.*/ }, async (args: any) => {\n        console.log('onLoad', args);\n\n        if (args.path === 'index.js') {\n          return {\n            loader: 'jsx',\n            contents: inputCode,\n          };\n        }\n\n\n        const cachedResult = await fileCache.getItem<esbuild.OnLoadResult>(args.path);\n\n        if (cachedResult){\n          return cachedResult;\n        }\n\n\n\n        const { data, request } = await axios.get(args.path);\n\n        const result: esbuild.OnLoadResult = {\n          loader: 'jsx',\n          contents: data,\n          resolveDir: new URL('./', request.responseURL).pathname\n        };\n        await fileCache.setItem(args.path, result);\n        return result;\n      });\n    },\n  };\n};\n"]},"metadata":{},"sourceType":"module"}