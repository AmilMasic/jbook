{"ast":null,"code":"var _jsxFileName = \"/Users/amilmasic/Development/code/react/jbook/src/components/add-cell.tsx\",\n    _s = $RefreshSig$();\n\nimport './add-cell.css';\nimport { useActions } from '../hooks/use-actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AddCell = ({\n  nextCellId\n}) => {\n  _s();\n\n  const {\n    insertCellBefore\n  } = useActions();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => insertCellBefore(nextCellId, 'code'),\n      children: \"Code\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => insertCellBefore(nextCellId, 'text'),\n      children: \"Text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AddCell, \"WCeYMonidkUsrU82gdQi6l0Xt4c=\", false, function () {\n  return [useActions];\n});\n\n_c = AddCell;\nexport default AddCell;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddCell\");","map":{"version":3,"sources":["/Users/amilmasic/Development/code/react/jbook/src/components/add-cell.tsx"],"names":["useActions","AddCell","nextCellId","insertCellBefore"],"mappings":";;;AAAA,OAAO,gBAAP;AACA,SAASA,UAAT,QAA2B,sBAA3B;;;AAMA,MAAMC,OAA+B,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAoB;AAAA;;AAC1D,QAAM;AAAEC,IAAAA;AAAF,MAAuBH,UAAU,EAAvC;AACA,sBACE;AAAA,4BACE;AAAQ,MAAA,OAAO,EAAE,MAAMG,gBAAgB,CAACD,UAAD,EAAa,MAAb,CAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAQ,MAAA,OAAO,EAAE,MAAMC,gBAAgB,CAACD,UAAD,EAAa,MAAb,CAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CAXD;;GAAMD,O;UACyBD,U;;;KADzBC,O;AAaN,eAAeA,OAAf","sourcesContent":["import './add-cell.css'\nimport { useActions } from '../hooks/use-actions';\n\n\ninterface AddCellProps {\n  nextCellId: string | null\n}\nconst AddCell: React.FC<AddCellProps> = ({ nextCellId }) => {\n  const { insertCellBefore } = useActions();\n  return (\n    <div>\n      <button onClick={() => insertCellBefore(nextCellId, 'code')}>Code</button>\n      <button onClick={() => insertCellBefore(nextCellId, 'text')}>Text</button>\n\n\n    </div>\n  )\n\n};\n\nexport default AddCell;\n"]},"metadata":{},"sourceType":"module"}