{"ast":null,"code":"var _jsxFileName = \"/Users/amilmasic/Development/code/react/jbook/src/components/code-cell.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport CodeEditor from './/code-editor';\nimport Preview from './/preview';\nimport bundle from '../bundler';\nimport Resizable from './resizable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CodeCell = () => {\n  _s();\n\n  const [code, setCode] = useState('');\n  const [err, setErr] = useState('');\n  const [input, setInput] = useState('');\n  useEffect(() => {\n    const timer = setTimeout(async () => {\n      const output = await bundle(input);\n      setCode(output.code);\n      setErr(output.err);\n    }, 1000);\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [input]);\n  return /*#__PURE__*/_jsxDEV(Resizable, {\n    direction: \"vertical\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'row'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Resizable, {\n        direction: \"horizontal\",\n        children: /*#__PURE__*/_jsxDEV(CodeEditor, {\n          initialValue: \"const a = 1;\",\n          onChange: value => setInput(value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Preview, {\n        code: code,\n        err: err\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CodeCell, \"NV8eFlrjwYVcVrGlMP9LZA0vB4Q=\");\n\n_c = CodeCell;\nexport default CodeCell;\n\nvar _c;\n\n$RefreshReg$(_c, \"CodeCell\");","map":{"version":3,"sources":["/Users/amilmasic/Development/code/react/jbook/src/components/code-cell.tsx"],"names":["useState","useEffect","CodeEditor","Preview","bundle","Resizable","CodeCell","code","setCode","err","setErr","input","setInput","timer","setTimeout","output","clearTimeout","height","display","flexDirection","value"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,UAAP,MAAuB,gBAAvB;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,MAAP,MAAmB,YAAnB;AACA,OAAOC,SAAP,MAAsB,aAAtB;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AAErB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACS,GAAD,EAAMC,MAAN,IAAgBV,QAAQ,CAAC,EAAD,CAA9B;AACA,QAAM,CAACW,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,EAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMY,KAAK,GAAGC,UAAU,CAAC,YAAY;AACnC,YAAMC,MAAM,GAAG,MAAMX,MAAM,CAACO,KAAD,CAA3B;AACAH,MAAAA,OAAO,CAACO,MAAM,CAACR,IAAR,CAAP;AACAG,MAAAA,MAAM,CAACK,MAAM,CAACN,GAAR,CAAN;AACD,KAJuB,EAIrB,IAJqB,CAAxB;AAKA,WAAO,MAAM;AACXO,MAAAA,YAAY,CAACH,KAAD,CAAZ;AACD,KAFD;AAGD,GATQ,EASN,CAACF,KAAD,CATM,CAAT;AAYA,sBACE,QAAE,SAAF;AAAY,IAAA,SAAS,EAAC,UAAtB;AAAA,2BACE;AAAK,MAAA,KAAK,EAAE;AAAEM,QAAAA,MAAM,EAAE,MAAV;AAAkBC,QAAAA,OAAO,EAAE,MAA3B;AAAmCC,QAAAA,aAAa,EAAE;AAAlD,OAAZ;AAAA,8BACE,QAAC,SAAD;AAAW,QAAA,SAAS,EAAC,YAArB;AAAA,+BACE,QAAC,UAAD;AAAY,UAAA,YAAY,EAAC,cAAzB;AACE,UAAA,QAAQ,EAAGC,KAAD,IAAWR,QAAQ,CAACQ,KAAD;AAD/B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAME,QAAC,OAAD;AAAS,QAAA,IAAI,EAAEb,IAAf;AAAqB,QAAA,GAAG,EAAEE;AAA1B;AAAA;AAAA;AAAA;AAAA,cANF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CA9BD;;GAAMH,Q;;KAAAA,Q;AAgCN,eAAeA,QAAf","sourcesContent":["import { useState, useEffect } from 'react';\nimport CodeEditor from './/code-editor';\nimport Preview from './/preview';\nimport bundle from '../bundler';\nimport Resizable from './resizable';\n\nconst CodeCell = () => {\n\n  const [code, setCode] = useState('');\n  const [err, setErr] = useState('');\n  const [input, setInput] = useState('');\n\n  useEffect(() => {\n    const timer = setTimeout(async () => {\n      const output = await bundle(input);\n      setCode(output.code);\n      setErr(output.err);\n    }, 1000);\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [input]);\n\n\n  return (\n    < Resizable direction=\"vertical\">\n      <div style={{ height: '100%', display: 'flex', flexDirection: 'row'}}>\n        <Resizable direction=\"horizontal\">\n          <CodeEditor initialValue=\"const a = 1;\"\n            onChange={(value) => setInput(value)}\n          />\n        </Resizable>\n        <Preview code={code} err={err}/>\n      </div>\n    </Resizable>\n  );\n};\n\nexport default CodeCell;\n"]},"metadata":{},"sourceType":"module"}