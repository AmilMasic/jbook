{"ast":null,"code":"var _jsxFileName = \"/Users/amilmasic/Development/code/react/jbook/jbook/packages/local-client/src/components/text-editor.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useRef } from 'react';\nimport './text-editor.css';\nimport MDEditor from '@uiw/react-md-editor';\nimport { useActions } from '../hooks/use-actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TextEditor = ({\n  cell\n}) => {\n  _s();\n\n  const ref = useRef(null);\n  const [editing, setEditing] = useState(false);\n  const {\n    updateCell\n  } = useActions();\n  useEffect(() => {\n    const listener = event => {\n      if (ref.current && event.target && ref.current.contains(event.target)) {\n        return;\n      }\n\n      setEditing(false);\n    };\n\n    document.addEventListener('click', listener, {\n      capture: true\n    });\n    return () => {\n      document.removeEventListener('click', listener, {\n        capture: true\n      });\n    };\n  }, []);\n\n  if (editing) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-editor\",\n      ref: ref,\n      children: /*#__PURE__*/_jsxDEV(MDEditor, {\n        value: cell.content,\n        onChange: v => updateCell(cell.id, v || '')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"text-editor card\",\n    onClick: () => setEditing(true),\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-content\",\n      children: /*#__PURE__*/_jsxDEV(MDEditor.Markdown, {\n        source: cell.content || 'Click to edit'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TextEditor, \"qy3i4cd3e7xOxySUwxTsRLzeMEo=\", false, function () {\n  return [useActions];\n});\n\n_c = TextEditor;\nexport default TextEditor;\n\nvar _c;\n\n$RefreshReg$(_c, \"TextEditor\");","map":{"version":3,"sources":["/Users/amilmasic/Development/code/react/jbook/jbook/packages/local-client/src/components/text-editor.tsx"],"names":["useState","useEffect","useRef","MDEditor","useActions","TextEditor","cell","ref","editing","setEditing","updateCell","listener","event","current","target","contains","document","addEventListener","capture","removeEventListener","content","v","id"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,MAA9B,QAA4C,OAA5C;AACA,OAAO,mBAAP;AACA,OAAOC,QAAP,MAAqB,sBAArB;AAEA,SAASC,UAAT,QAA2B,sBAA3B;;;AAMA,MAAMC,UAAqC,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAAA;;AAE1D,QAAMC,GAAG,GAAGL,MAAM,CAAwB,IAAxB,CAAlB;AACA,QAAM,CAACM,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM;AAAEU,IAAAA;AAAF,MAAiBN,UAAU,EAAjC;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMU,QAAQ,GAAIC,KAAD,IAAuB;AACtC,UACEL,GAAG,CAACM,OAAJ,IACAD,KAAK,CAACE,MADN,IAEAP,GAAG,CAACM,OAAJ,CAAYE,QAAZ,CAAqBH,KAAK,CAACE,MAA3B,CAHF,EAIE;AACA;AACD;;AACDL,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KATD;;AAUAO,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,EAAmCN,QAAnC,EAA6C;AAACO,MAAAA,OAAO,EAAE;AAAV,KAA7C;AAEA,WAAO,MAAM;AACXF,MAAAA,QAAQ,CAACG,mBAAT,CAA6B,OAA7B,EAAsCR,QAAtC,EAAgD;AAACO,QAAAA,OAAO,EAAE;AAAV,OAAhD;AACD,KAFD;AAGD,GAhBQ,EAgBN,EAhBM,CAAT;;AAkBA,MAAIV,OAAJ,EAAa;AACX,wBACE;AAAK,MAAA,SAAS,EAAC,aAAf;AAA6B,MAAA,GAAG,EAAED,GAAlC;AAAA,6BACE,QAAC,QAAD;AAAU,QAAA,KAAK,EAAED,IAAI,CAACc,OAAtB;AAA+B,QAAA,QAAQ,EAAGC,CAAD,IAAOX,UAAU,CAACJ,IAAI,CAACgB,EAAN,EAAUD,CAAC,IAAI,EAAf;AAA1D;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AAGD,sBACE;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAkC,IAAA,OAAO,EAAE,MAAMZ,UAAU,CAAC,IAAD,CAA3D;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,6BACE,QAAC,QAAD,CAAU,QAAV;AAAmB,QAAA,MAAM,EAAEH,IAAI,CAACc,OAAL,IAAgB;AAA3C;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CAxCD;;GAAMf,U;UAImBD,U;;;KAJnBC,U;AA0CN,eAAeA,UAAf","sourcesContent":["import { useState, useEffect, useRef } from 'react';\nimport './text-editor.css';\nimport MDEditor from '@uiw/react-md-editor';\nimport { Cell } from '../state';\nimport { useActions } from '../hooks/use-actions';\n\ninterface TextEditorProps {\n  cell: Cell;\n}\n\nconst TextEditor: React.FC<TextEditorProps> = ({ cell }) => {\n\n  const ref = useRef<HTMLDivElement | null>(null);\n  const [editing, setEditing] = useState(false);\n  const { updateCell } = useActions();\n\n  useEffect(() => {\n    const listener = (event: MouseEvent) => {\n      if (\n        ref.current &&\n        event.target &&\n        ref.current.contains(event.target as Node)\n      ) {\n        return;\n      }\n      setEditing(false);\n    };\n    document.addEventListener('click', listener, {capture: true});\n\n    return () => {\n      document.removeEventListener('click', listener, {capture: true});\n    };\n  }, []);\n\n  if (editing) {\n    return (\n      <div className=\"text-editor\" ref={ref}>\n        <MDEditor value={cell.content} onChange={(v) => updateCell(cell.id, v || '')}/>\n      </div>\n    );\n  }\n\n\n  return (\n    <div className=\"text-editor card\" onClick={() => setEditing(true)}>\n      <div className=\"card-content\">\n        <MDEditor.Markdown source={cell.content || 'Click to edit'} />\n      </div>\n    </ div>\n  );\n};\n\nexport default TextEditor;\n"]},"metadata":{},"sourceType":"module"}