{"ast":null,"code":"var _jsxFileName = \"/Users/amilmasic/Development/code/react/jbook/src/components/code-cell.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport CodeEditor from './/code-editor';\nimport Preview from './/preview';\nimport Resizable from './resizable';\nimport { useActions } from '../hooks/use-actions';\nimport { useTypedSelector } from '../hooks/use-typed-selector';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CodeCell = ({\n  cell\n}) => {\n  _s();\n\n  const {\n    updateCell,\n    createBundle\n  } = useActions();\n  const bundle = useTypedSelector(state => state.bundles[cell.id]);\n  console.log(bundle);\n  useEffect(() => {\n    const timer = setTimeout(async () => {\n      createBundle(cell.id, cell.content);\n    }, 1000);\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [cell.content, cell.id]);\n  return /*#__PURE__*/_jsxDEV(Resizable, {\n    direction: \"vertical\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: 'calc(100%-10px)',\n        display: 'flex',\n        flexDirection: 'row'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Resizable, {\n        direction: \"horizontal\",\n        children: /*#__PURE__*/_jsxDEV(CodeEditor, {\n          initialValue: cell.content,\n          onChange: value => updateCell(cell.id, value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), \"// \", /*#__PURE__*/_jsxDEV(Preview, {\n        code: code,\n        err: err\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 12\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CodeCell, \"drpAkWiXS2fQt+ooxmYouDs1MXE=\", false, function () {\n  return [useActions, useTypedSelector];\n});\n\n_c = CodeCell;\nexport default CodeCell;\n\nvar _c;\n\n$RefreshReg$(_c, \"CodeCell\");","map":{"version":3,"sources":["/Users/amilmasic/Development/code/react/jbook/src/components/code-cell.tsx"],"names":["useEffect","CodeEditor","Preview","Resizable","useActions","useTypedSelector","CodeCell","cell","updateCell","createBundle","bundle","state","bundles","id","console","log","timer","setTimeout","content","clearTimeout","height","display","flexDirection","value","code","err"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,UAAP,MAAuB,gBAAvB;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AAEA,SAAQC,UAAR,QAAyB,sBAAzB;AACA,SAASC,gBAAT,QAAiC,6BAAjC;;;AAMA,MAAMC,QAAiC,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAAA;;AAGtD,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA;AAAd,MAA+BL,UAAU,EAA/C;AACA,QAAMM,MAAM,GAAGL,gBAAgB,CAAEM,KAAD,IAAWA,KAAK,CAACC,OAAN,CAAcL,IAAI,CAACM,EAAnB,CAAZ,CAA/B;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYL,MAAZ;AACAV,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMgB,KAAK,GAAGC,UAAU,CAAC,YAAY;AACnCR,MAAAA,YAAY,CAACF,IAAI,CAACM,EAAN,EAAUN,IAAI,CAACW,OAAf,CAAZ;AACD,KAFuB,EAErB,IAFqB,CAAxB;AAGA,WAAO,MAAM;AACXC,MAAAA,YAAY,CAACH,KAAD,CAAZ;AACD,KAFD;AAGD,GAPQ,EAON,CAACT,IAAI,CAACW,OAAN,EAAeX,IAAI,CAACM,EAApB,CAPM,CAAT;AAUA,sBACE,QAAE,SAAF;AAAY,IAAA,SAAS,EAAC,UAAtB;AAAA,2BACE;AAAK,MAAA,KAAK,EAAE;AAAEO,QAAAA,MAAM,EAAE,iBAAV;AAA6BC,QAAAA,OAAO,EAAE,MAAtC;AAA8CC,QAAAA,aAAa,EAAE;AAA7D,OAAZ;AAAA,8BACE,QAAC,SAAD;AAAW,QAAA,SAAS,EAAC,YAArB;AAAA,+BACE,QAAC,UAAD;AAAY,UAAA,YAAY,EAAEf,IAAI,CAACW,OAA/B;AACE,UAAA,QAAQ,EAAGK,KAAD,IAAWf,UAAU,CAACD,IAAI,CAACM,EAAN,EAAUU,KAAV;AADjC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,sBAMK,QAAC,OAAD;AAAS,QAAA,IAAI,EAAEC,IAAf;AAAqB,QAAA,GAAG,EAAEC;AAA1B;AAAA;AAAA;AAAA;AAAA,cANL;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CA5BD;;GAAMnB,Q;UAGiCF,U,EACtBC,gB;;;KAJXC,Q;AA8BN,eAAeA,QAAf","sourcesContent":["import { useEffect } from 'react';\nimport CodeEditor from './/code-editor';\nimport Preview from './/preview';\nimport Resizable from './resizable';\nimport { Cell } from '../state';\nimport {useActions} from '../hooks/use-actions';\nimport { useTypedSelector } from '../hooks/use-typed-selector';\n\ninterface CodeCellProps {\n  cell: Cell\n}\n\nconst CodeCell: React.FC<CodeCellProps> = ({ cell }) => {\n\n\n  const { updateCell, createBundle } = useActions();\n  const bundle = useTypedSelector((state) => state.bundles[cell.id]);\n  console.log(bundle);\n  useEffect(() => {\n    const timer = setTimeout(async () => {\n      createBundle(cell.id, cell.content)\n    }, 1000);\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [cell.content, cell.id]);\n\n\n  return (\n    < Resizable direction=\"vertical\">\n      <div style={{ height: 'calc(100%-10px)', display: 'flex', flexDirection: 'row'}}>\n        <Resizable direction=\"horizontal\">\n          <CodeEditor initialValue={cell.content}\n            onChange={(value) => updateCell(cell.id, value)}\n          />\n        </Resizable>\n        // <Preview code={code} err={err}/>\n      </div>\n    </Resizable>\n  );\n};\n\nexport default CodeCell;\n"]},"metadata":{},"sourceType":"module"}