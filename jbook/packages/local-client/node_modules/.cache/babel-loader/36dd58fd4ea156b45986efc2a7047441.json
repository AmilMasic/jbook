{"ast":null,"code":"var _jsxFileName = \"/Users/amilmasic/Development/code/react/jbook/src/components/code-cell.tsx\",\n    _s = $RefreshSig$();\n\nimport './code-cell.css';\nimport { useEffect } from 'react';\nimport CodeEditor from './/code-editor';\nimport Preview from './/preview';\nimport Resizable from './resizable';\nimport { useActions } from '../hooks/use-actions';\nimport { useTypedSelector } from '../hooks/use-typed-selector';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CodeCell = ({\n  cell\n}) => {\n  _s();\n\n  const {\n    updateCell,\n    createBundle\n  } = useActions();\n  const bundle = useTypedSelector(state => state.bundles[cell.id]);\n  const cumulativeCode = useTypedSelector(state => {\n    const {\n      data,\n      order\n    } = state.cells;\n    const orderedCells = order.map(id => data[id]);\n    const cumulativeCode = [];\n\n    for (let c of orderedCells) {\n      if (c.type === 'code') {\n        cumulativeCode.push(c.content);\n      }\n\n      if (c.id === cell.id) {\n        break;\n      }\n    }\n\n    return cumulativeCode;\n  });\n  console.log(cumulativeCode);\n  useEffect(() => {\n    if (!bundle) {\n      createBundle(cell.id, cell.content);\n      return;\n    }\n\n    const timer = setTimeout(async () => {\n      createBundle(cell.id, cell.content);\n    }, 1000);\n    return () => {\n      clearTimeout(timer);\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [cell.content, cell.id, createBundle]);\n  return /*#__PURE__*/_jsxDEV(Resizable, {\n    direction: \"vertical\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: 'calc(100%-10px)',\n        display: 'flex',\n        flexDirection: 'row'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Resizable, {\n        direction: \"horizontal\",\n        children: /*#__PURE__*/_jsxDEV(CodeEditor, {\n          initialValue: cell.content,\n          onChange: value => updateCell(cell.id, value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-wrapper\",\n        children: !bundle || bundle.loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress-cover\",\n          children: /*#__PURE__*/_jsxDEV(\"progress\", {\n            className: \"progress is-small is-primary\",\n            max: \"100\",\n            children: \"Loading\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 16\n        }, this) : /*#__PURE__*/_jsxDEV(Preview, {\n          code: bundle.code,\n          err: bundle.err\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 14\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CodeCell, \"r5M9pii0T6hMXRNyIRC8DN3Hi6E=\", false, function () {\n  return [useActions, useTypedSelector, useTypedSelector];\n});\n\n_c = CodeCell;\nexport default CodeCell;\n\nvar _c;\n\n$RefreshReg$(_c, \"CodeCell\");","map":{"version":3,"sources":["/Users/amilmasic/Development/code/react/jbook/src/components/code-cell.tsx"],"names":["useEffect","CodeEditor","Preview","Resizable","useActions","useTypedSelector","CodeCell","cell","updateCell","createBundle","bundle","state","bundles","id","cumulativeCode","data","order","cells","orderedCells","map","c","type","push","content","console","log","timer","setTimeout","clearTimeout","height","display","flexDirection","value","loading","code","err"],"mappings":"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","sourcesContent":["import './code-cell.css';\nimport { useEffect } from 'react';\nimport CodeEditor from './/code-editor';\nimport Preview from './/preview';\nimport Resizable from './resizable';\nimport { Cell } from '../state';\nimport {useActions} from '../hooks/use-actions';\nimport { useTypedSelector } from '../hooks/use-typed-selector';\n\ninterface CodeCellProps {\n  cell: Cell\n}\n\nconst CodeCell: React.FC<CodeCellProps> = ({ cell }) => {\n\n\n  const { updateCell, createBundle } = useActions();\n    const bundle = useTypedSelector((state) => state.bundles[cell.id]);\n    const cumulativeCode = useTypedSelector((state) => {\n      const { data, order } = state.cells;\n      const orderedCells = order.map(id => data[id]);\n\n      const cumulativeCode = [];\n      for (let c of orderedCells) {\n        if (c.type === 'code'){\n          cumulativeCode.push(c.content);\n        }\n        if (c.id === cell.id) {\n          break;\n        }\n      }\n      return cumulativeCode;\n    });\n    console.log(cumulativeCode);\n\n  useEffect(() => {\n    if (!bundle) {\n      createBundle(cell.id, cell.content);\n      return;\n    }\n    const timer = setTimeout(async () => {\n      createBundle(cell.id, cell.content)\n    }, 1000);\n    return () => {\n      clearTimeout(timer);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [cell.content, cell.id, createBundle]);\n\n\n  return (\n    < Resizable direction=\"vertical\">\n      <div style={{ height: 'calc(100%-10px)', display: 'flex', flexDirection: 'row'}}>\n        <Resizable direction=\"horizontal\">\n          <CodeEditor initialValue={cell.content}\n            onChange={(value) => updateCell(cell.id, value)}\n          />\n        </Resizable>\n        <div className=\"progress-wrapper\">\n          {!bundle || bundle.loading ? (\n\n               <div className=\"progress-cover\">\n                <progress className=\"progress is-small is-primary\" max=\"100\">\n                  Loading\n                </progress>\n               </div>\n\n           ) : (\n             <Preview code={bundle.code} err={bundle.err} />\n           )}\n        </div>\n      </div>\n    </Resizable>\n  );\n};\n\nexport default CodeCell;\n"]},"metadata":{},"sourceType":"module"}